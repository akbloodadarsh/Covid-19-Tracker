[{"/home/akblood/Documents/Covid-19-Tracker/src/index.js":"1","/home/akblood/Documents/Covid-19-Tracker/src/App.js":"2","/home/akblood/Documents/Covid-19-Tracker/src/reportWebVitals.js":"3","/home/akblood/Documents/Covid-19-Tracker/src/InfoBox.js":"4","/home/akblood/Documents/Covid-19-Tracker/src/Map.js":"5","/home/akblood/Documents/Covid-19-Tracker/src/Table.js":"6","/home/akblood/Documents/Covid-19-Tracker/src/LineGraph.js":"7","/home/akblood/Documents/Covid-19-Tracker/src/Util.js":"8","/home/akblood/Documents/Covid-19-Tracker/src/LocationMarker.js":"9","/home/akblood/Documents/Covid-19-Tracker/src/MapCountryChange.js":"10","/home/akblood/Documents/Covid-19-Tracker/src/DrawCircleOnMap.js":"11"},{"size":500,"mtime":1607964005704,"results":"12","hashOfConfig":"13"},{"size":6133,"mtime":1608560986627,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1607964005704,"results":"15","hashOfConfig":"13"},{"size":814,"mtime":1608367239817,"results":"16","hashOfConfig":"13"},{"size":1178,"mtime":1608560139940,"results":"17","hashOfConfig":"13"},{"size":1083,"mtime":1608362652853,"results":"18","hashOfConfig":"13"},{"size":6249,"mtime":1608561682861,"results":"19","hashOfConfig":"13"},{"size":4704,"mtime":1608560720332,"results":"20","hashOfConfig":"13"},{"size":503,"mtime":1608559638597,"results":"21","hashOfConfig":"13"},{"size":212,"mtime":1608559693568,"results":"22","hashOfConfig":"13"},{"size":1865,"mtime":1608560506741,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1e5rp7m",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"/home/akblood/Documents/Covid-19-Tracker/src/index.js",[],["48","49"],"/home/akblood/Documents/Covid-19-Tracker/src/App.js",[],"/home/akblood/Documents/Covid-19-Tracker/src/reportWebVitals.js",[],"/home/akblood/Documents/Covid-19-Tracker/src/InfoBox.js",[],"/home/akblood/Documents/Covid-19-Tracker/src/Map.js",[],"/home/akblood/Documents/Covid-19-Tracker/src/Table.js",[],"/home/akblood/Documents/Covid-19-Tracker/src/LineGraph.js",["50"],"import {useState, useEffect, memo} from 'react';\nimport { Line } from 'react-chartjs-2';\nimport numeral from 'numeral';\n\nconst options =     \n    {\n        text: \"cases\",\n        easing: \"linear\",\n        responsive: true,\n        legend : {\n                    display : false,\n                },\n    elements : \n    {\n        point : {\n            radius : 0,\n        },\n    },\n    maintainAspectRatio : false,\n    tooltips : {\n        mode : \"index\",\n        intersect : false,\n        callbacks : {\n            label : function(tooltipItem, data) {\n                return numeral(tooltipItem.value).format(\"+0,0\");\n            },\n        },\n    },\n    scales : \n    {\n        xAxes : \n        [\n            {\n                type : \"time\",\n                time : {\n                    format : \"MM/DD/YY\",\n                    tooltipFormat : \"ll\",\n                },\n            },\n        ],\n        yAxes : \n        [\n            {\n                gridLines : \n                {\n                    display : false,\n                },\n                ticks : \n                {\n                    min: 0,\n                    callback : function(value, index,values)\n                    {\n                        return numeral(value).format(\"0a\");\n                    }\n                },\n            },\n        ],\n    },\n};\n\nfunction LineGraph({countryName='all', showDetails='0'}) {\n    const [data_cases, setDataCases] = useState({});\n    const [data_deaths, setDataDeaths] = useState({});\n    const [data_recovered, setDataRecovered] = useState({});\n    const [countryDetails, setCountryDetails] = useState({});\n\n    useEffect(() => \n    {\n        const buildChartData = (data, caseType) => {\n            // if(countryName==='World')countryName = 'all';\n            if(countryName!=='all' && countryName!=='World')data=data.timeline;\n            try {\n                if(!data.cases)return;\n            }\n            catch (e) \n            {\n                return;\n            }\n            let chartData = []\n            let lastDataPoint;\n            for(let date in data.cases) {\n                if(lastDataPoint) \n                {\n                    let newDataPoint = \n                    {\n                        x : date,\n                        y : data[caseType][date] - lastDataPoint, \n                    };\n                    chartData.push(newDataPoint);\n                }\n                lastDataPoint = data[caseType][date]\n            }\n            return chartData;\n        };\n        const fetchData = async () => \n        {\n            await fetch(`${countryName==='World' || countryName==='all'?'https://disease.sh/v3/covid-19/historical/all':`https://disease.sh/v3/covid-19/historical/${countryName}`}`)\n            .then((response) => response.json())\n            .then(data => {\n                setDataCases(buildChartData(data,'cases'));\n                setDataDeaths(buildChartData(data,'deaths'));\n                setDataRecovered(buildChartData(data,'recovered'));      \n            });\n        };\n        const fetchCountryDetails = async () => \n        {\n            await fetch(`${countryName==='World' || countryName==='all'?'https://disease.sh/v3/covid-19/all':`https://disease.sh/v3/covid-19/countries/${countryName}`}`)\n            .then((response) => response.json())\n            .then(data => {\n                setCountryDetails(data);      \n            });\n        };\n        fetchCountryDetails();\n        console.log(countryDetails);\n        fetchData();\n    },[countryName]);\n    return (\n        <div>\n            {showDetails==='1' && <h1 Style=\"padding-bottom=10px;\">{countryName}</h1>}\n            {\n                data_cases?.length > 0 && data_recovered?.length > 0 && data_deaths?.length > 0 && (\n                <Line options = {options} \n                    data={{\n                    datasets : [\n                        {\n                            backgroundColor : \"rgba(204,16,52,0)\",\n                            borderColor : \"#CC1034\",\n                            data : data_cases,\n                        },\n                        {\n                            backgroundColor : \"rgba(204,16,52,0)\",\n                            borderColor : \"green\",\n                            data : data_recovered,\n                        },\n                        {\n                            backgroundColor : \"rgba(204,16,52,0)\",\n                            borderColor : \"#c02739\",\n                            data : data_deaths,\n                        },\n                    ],\n                }\n                } />)\n            }\n            {/* {showDetails==='0' && <div>\n                <p>Active : {countryDetails.active}</p>\n                <p>Active Per One Million : {countryDetails.activePerOneMillion}</p>\n                <p>Cases : {countryDetails.cases}</p>\n                <p>Cases Per One Million : {countryDetails.casesPerOneMillion}</p>\n                <p>Continent : {countryDetails.continent}</p>\n                <p>Country : {countryDetails.country}</p>\n                <p>Critical : {countryDetails.critical}</p>\n                <p>Critical Per One Million : {countryDetails.criticalPerOneMillion}</p>\n                <p>Deaths : {countryDetails.deaths}</p>\n                <p>Deaths Per One Million : {countryDetails.deathsPerOneMillion}</p>\n                <p>One Case Per People : {countryDetails.oneCasePerPeople}</p>\n                <p>One Death Per People : {countryDetails.oneDeathPerPeople}</p>\n                <p>One Test Per People : {countryDetails.oneTestPerPeople}</p>\n                <p>Population : {countryDetails.population}</p>\n                <p>Recovered : {countryDetails.recovered}</p>\n                <p>Recovered Per One Million : {countryDetails.recoveredPerOneMillion}</p>\n                <p>Tests : {countryDetails.tests}</p>\n                <p>Tests Per One Million : {countryDetails.testsPerOneMillion}</p>\n                <p>Today Cases : {countryDetails.todayCases}</p>\n                <p>Today Deaths : {countryDetails.todayDeaths}</p>\n                <p>Today Recovered : {countryDetails.todayRecovered}</p>\n                </div>\n            } */}\n                 \n        </div>\n    )\n}\n\nexport default memo(LineGraph);","/home/akblood/Documents/Covid-19-Tracker/src/Util.js",[],"/home/akblood/Documents/Covid-19-Tracker/src/LocationMarker.js",[],"/home/akblood/Documents/Covid-19-Tracker/src/MapCountryChange.js",[],"/home/akblood/Documents/Covid-19-Tracker/src/DrawCircleOnMap.js",[],{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":116,"column":7,"nodeType":"57","endLine":116,"endColumn":20,"suggestions":"58"},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'countryDetails'. Either include it or remove the dependency array.","ArrayExpression",["61"],"no-global-assign","no-unsafe-negation",{"desc":"62","fix":"63"},"Update the dependencies array to be: [countryDetails, countryName]",{"range":"64","text":"65"},[3516,3529],"[countryDetails, countryName]"]